pipeline {
    agent any

    stages {
        stage("Setup User/Group IDs") {
            steps {
                script {
                    env.USER_ID = sh(script: 'id -u', returnStdout: true).trim()
                    env.GROUP_ID = sh(script: 'id -g', returnStdout: true).trim()
                }
            }
        }
        stage("Checkout Code") {
            steps {
                checkout scm
            }
        }
        stage("Check PR Title") {
            when {
                changeRequest()
            }
            steps {
                script {
                    def title = env.CHANGE_TITLE ?: ""
                    if (!title.startsWith("PROJ-")) {
                        error("PR title must start with a JIRA ID like PROJ-1234")
                    }
                }
            }
        }
        stage("Build and Test") {
            agent {
                docker {
                    image 'python:3.11-slim'
                    args "--user=${env.USER_ID}:${env.GROUP_ID}"
                }
            }
            steps {
                sh 'python -m pip install --upgrade pip' // Good practice to update pip first
                sh 'cd python-api-yt && pip install -r requirements.txt'
                sh 'cd python-api-yt && python -m pytest -v -s --junitxml=results.xml || true'
            }
        }
    }
    
    post {
        always {
            echo 'Archiving test results'
            junit 'python-api-yt/results.xml'
            
            echo 'Cleaning working directory'
            deleteDir()
        }
        success {
            echo "Build and test passed successfully!"
        }
        failure {
            echo "Build and test failed."
        }
    }
}
